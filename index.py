#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    May 21, 2019 02:19:17 PM IST  platform: Windows NT

import sys
import os
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import index_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    index_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    index_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("832x579+263+62")
        top.title("Welcome")
        top.configure(background="#bfeaef")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.036, rely=0.052, relheight=0.889
                , relwidth=0.931)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#CAFAFE")
        self.Frame1.configure(width=775)

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.039, rely=0.019, height=41, width=724)
        self.Label1.configure(background="#CAFAFE")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Lucida Calligraphy} -size 14 -weight bold -underline 1")
        self.Label1.configure(foreground="#379683")
        self.Label1.configure(text='''Tommbstone Implementation for Insertion and Deletion''')
        self.Label1.configure(width=724)

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.245, rely=0.136, height=71, width=394)
        self.Label2.configure(background="#CAFAFE")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Comic Sans MS} -size 11 -weight bold -slant italic")
        self.Label2.configure(foreground="#379683")
        self.Label2.configure(text='''by
Amrit Raj ,      1BY16IS006
Roshan Jagwani , 1BY16IS070''')
        self.Label2.configure(width=394)

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.297, rely=0.33, height=81, width=324)
        self.Label3.configure(background="#CAFAFE")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Comic Sans MS} -size 11 -weight bold -slant italic")
        self.Label3.configure(foreground="#379683")
        self.Label3.configure(text='''Under the Guidence of
Veena N,
Assistant Professor,
BMSIT&M''')
        self.Label3.configure(width=324)

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.232, rely=0.524, height=111, width=414)
        self.Label4.configure(background="#CAFAFE")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Old English Text MT} -size 12 -weight bold -slant italic")
        self.Label4.configure(foreground="#379683")
        self.Label4.configure(text='''A tombstone is a deleted record in a replica of a 
distributed data store. The tombstone is necessary, as 
distributed data stores use eventual consistency, 
where only a subset of nodes where the data is stored must 
respond before an operation is considered to be successful.''')
        self.Label4.configure(width=414)

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.323, rely=0.816, height=44, width=297)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#f4e4c1")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Consolas} -size 11 -weight bold -slant italic")
        self.Button1.configure(foreground="#0d19a3")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(relief="groove")
        self.Button1.configure(text='''Click here to go to the project''')
        self.Button1.configure(width=297)
        self.Button1.configure(command=self.clicked)

    def clicked(self):
        root.destroy()
        os.system('python register.py')

if __name__ == '__main__':
    vp_start_gui()





